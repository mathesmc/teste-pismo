// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: query.sql

package main

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  document_number
) VALUES (
  $1
)
RETURNING id, document_number, created_at
`

func (q *Queries) CreateAccount(ctx context.Context, documentNumber int64) (Account, error) {
	row := q.queryRow(ctx, q.createAccountStmt, createAccount, documentNumber)
	var i Account
	err := row.Scan(&i.ID, &i.DocumentNumber, &i.CreatedAt)
	return i, err
}

const createTransactions = `-- name: CreateTransactions :one
INSERT INTO transactions (
  account_id, operation_type_id, amount 
) VALUES (
  $1, $2, $3
)
RETURNING id, account_id, operation_type_id, amount, event_date
`

type CreateTransactionsParams struct {
	AccountID       int32 `json:"account_id"`
	OperationTypeID int32 `json:"operation_type_id"`
	Amount          int64 `json:"amount"`
}

func (q *Queries) CreateTransactions(ctx context.Context, arg CreateTransactionsParams) (Transaction, error) {
	row := q.queryRow(ctx, q.createTransactionsStmt, createTransactions, arg.AccountID, arg.OperationTypeID, arg.Amount)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.OperationTypeID,
		&i.Amount,
		&i.EventDate,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, document_number, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.queryRow(ctx, q.getAccountStmt, getAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.DocumentNumber, &i.CreatedAt)
	return i, err
}

const getTransactions = `-- name: GetTransactions :one
SELECT id, account_id, operation_type_id, amount, event_date FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransactions(ctx context.Context, id int64) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionsStmt, getTransactions, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.OperationTypeID,
		&i.Amount,
		&i.EventDate,
	)
	return i, err
}
