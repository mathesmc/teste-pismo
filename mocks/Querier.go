// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/mathesmc/teste-pismo/db/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: ctx, documentNumber
func (_m *Querier) CreateAccount(ctx context.Context, documentNumber string) (db.Account, error) {
	ret := _m.Called(ctx, documentNumber)

	var r0 db.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Account); ok {
		r0 = rf(ctx, documentNumber)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, documentNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOperationType provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateOperationType(ctx context.Context, arg db.CreateOperationTypeParams) (db.OperationType, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.OperationType
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateOperationTypeParams) db.OperationType); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.OperationType)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.CreateOperationTypeParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransactions provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateTransactions(ctx context.Context, arg db.CreateTransactionsParams) (db.Transaction, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransactionsParams) db.Transaction); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.CreateTransactionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropAccount provides a mock function with given fields: ctx, id
func (_m *Querier) DropAccount(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropOperationType provides a mock function with given fields: ctx, id
func (_m *Querier) DropOperationType(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropTransaction provides a mock function with given fields: ctx, id
func (_m *Querier) DropTransaction(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *Querier) GetAccount(ctx context.Context, id int64) (db.Account, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Account
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationTypes provides a mock function with given fields: ctx, id
func (_m *Querier) GetOperationTypes(ctx context.Context, id int64) (db.OperationType, error) {
	ret := _m.Called(ctx, id)

	var r0 db.OperationType
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.OperationType); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.OperationType)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: ctx, id
func (_m *Querier) GetTransactions(ctx context.Context, id int64) (db.Transaction, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQuerier interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuerier(t mockConstructorTestingTNewQuerier) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
