// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	db "github.com/mathesmc/teste-pismo/db/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddAccount provides a mock function with given fields: _a0
func (_m *Repository) AddAccount(_a0 storage.createAccountParams) (db.Account, error) {
	ret := _m.Called(_a0)

	var r0 db.Account
	if rf, ok := ret.Get(0).(func(storage.createAccountParams) db.Account); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(storage.createAccountParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTransaction provides a mock function with given fields: _a0
func (_m *Repository) AddTransaction(_a0 storage.createTransactionParams) db.Transaction {
	ret := _m.Called(_a0)

	var r0 db.Transaction
	if rf, ok := ret.Get(0).(func(storage.createTransactionParams) db.Transaction); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.Transaction)
	}

	return r0
}

// ShowAccount provides a mock function with given fields: _a0
func (_m *Repository) ShowAccount(_a0 int64) (db.Account, error) {
	ret := _m.Called(_a0)

	var r0 db.Account
	if rf, ok := ret.Get(0).(func(int64) db.Account); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
